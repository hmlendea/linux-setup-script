# If not running interactively, don't do anything
[[ $- != *i* ]] && return

### Custom prompt

function get_git_branch_name {
    local branchName=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
    echo ${branchName}
}

function get_git_branch_colour {
    local branchName=$(get_git_branch_name)

    if [ "${branchName}" == "HEAD" ]; then
        echo "41"
    elif [ "${branchName}" == "master" ]; then
        echo "93"
    else
        echo "36"
    fi
}

function get_git_branch_status {
    BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)

    if [ ! -z ${BRANCH_NAME} ]; then
        UPSTREAM=${1:-'@{u}'}
        LOCAL=$(git rev-parse @)
        REMOTE=$(git rev-parse "$UPSTREAM" 2>/dev/null)

        if [ -z ${REMOTE} ]; then
            echo "local-only"
        else
            BASE=$(git merge-base @ "$UPSTREAM")
            LOCAL_CHANGES=$(git diff-index --name-only HEAD --)

            if [ ${LOCAL} = ${REMOTE} ]; then
                if [ -z "${LOCAL_CHANGES}" ]; then
                    echo "up-to-date"
                else
                    echo "local-changes"
                fi
            elif [ ${LOCAL} = ${BASE} ]; then
                echo "behind"
            elif [ ${REMOTE} = ${BASE} ]; then
                echo "ahead"
            else
                echo "diverged"
            fi
        fi
    fi
}

function get_git_branch_status_colour {
    local branchStatus=$(get_git_branch_status)

    if [ "${branchStatus}" == "local-changes" ]; then
        echo "32"
    elif [ "${branchStatus}" == "local-only" ]; then
        echo "93"
    elif [ "${branchStatus}" == "behind" ]; then
        echo "31"
    elif [ "${branchStatus}" == "ahead" ]; then
        echo "92"
    elif [ "${branchStatus}" == "diverged" ]; then
        echo "91"
    fi
}

function get_git_branch_status_indicator {
    local branchStatus=$(get_git_branch_status)
    local branchStatusIndicator=""

    if [ "${branchStatus}" == "local-changes" ]; then
        branchStatusIndicator="*" #" ■"
    elif [ "${branchStatus}" == "local-only" ]; then
        branchStatusIndicator="~"
    elif [ "${branchStatus}" == "behind" ]; then
        branchStatusIndicator="-" #" ▼"
    elif [ "${branchStatus}" == "ahead" ]; then
        branchStatusIndicator="+" #" ▲"
    elif [ "${branchStatus}" == "diverged" ]; then
        branchStatusIndicator="±" #" ♦"
    fi

    if [ -n "${branchStatusIndicator}" ]; then
        echo " ${branchStatusIndicator}"
    fi
}

function get_git_branch_separator {
    local branchName=$(get_git_branch_name)

    if [ ! -z ${branchName} ]; then
        if [ -z $* ]; then
            echo " "
        else
            echo $*
        fi
    fi
}

function get_path {
    MAX_LENGTH=24
    PWD=$(pwd)
    CWD=${PWD##*/}

    if [ "$HOME" == "$PWD" ]; then
        echo "~"
    elif [ ${#CWD} -gt $((MAX_LENGTH)) ]; then
        echo ${CWD:0:$((MAX_LENGTH/2-1))}..${CWD:(-$((MAX_LENGTH/2-1)))}
    elif [ "${PWD}" == "/${CWD}" ]; then
        echo ${PWD}
    else
        echo ${CWD}
    fi
}

function get_path_colour {
    if [[ "$(pwd)" == "/" ]]; then
        echo "41"
    elif [[ "$(pwd)" == "/root" ]]; then
        echo "41"
    elif [[ "$(pwd)" == "/root/*" ]]; then
        echo "41"
    elif [[ "$(pwd)" == "/home/${USER}" ]]; then
        echo "93"
    elif [[ ! -w "$(pwd)" ]]; then
        echo "31"
    else
        echo "33"
    fi
}

function set_custom_prompt {
    local userColour="34"   # Default = blue
    local hostColour="32"   # Default = green

    local separator1="@"
    local separator2=":"
    local separator3=">"

    [ "$(whoami)" == "root" ]   && userColour="31" # Root = red
    [ "$(whoami)" == "guest" ]  && userColour="33" # Guest = yellow

    [[ ${HOSTNAME} == *Craft ]] && hostColour="33" # Minecraft Server = Dark Yellow
    [[ ${HOSTNAME} == *Pi ]]    && hostColour="95" # RaspberryPi = Light Magenta

    local ps1user="\[\e[01;${userColour}m\]$USER\[\e[m\]"
    local ps1host="\[\e[${hostColour}m\]\h\[\e[m\]"

    local ps1path="\[\e[\$(get_path_colour)m\]\$(get_path)\[\e[m\]"

    local ps1gitSeparator1="\[\e[m\]\$(get_git_branch_separator '(')"
    local ps1gitSeparator2="\[\e[m\]\$(get_git_branch_separator ')')\$(get_git_branch_separator ' ')"
    local ps1gitBranchIndicator="\[\e[\$(get_git_branch_status_colour)m\]\$(get_git_branch_status_indicator)\[\e[m\]"
    local ps1git="${ps1gitSeparator1}\[\e[\$(get_git_branch_colour)m\]\$(get_git_branch_name)${ps1gitBranchIndicator}${ps1gitSeparator2}\[\e[m\]"

    export PS1="$ps1user$separator1$ps1host$separator2${ps1path} $ps1git$separator3 "
}

if [ -z "${USER}" ] && [ ! -z "${USERNAME}" ]; then
    export USER=${USERNAME}
fi

set_custom_prompt
shopt -s checkwinsize

#################
### FUNCTIONS ###
#################

extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)  tar xvjf $1     ;;
            *.tar.gz)   tar xvzf $1     ;;
            *.bz2)      bunzip2 $1      ;;
            *.rar)      unrar x $1      ;;
            *.gz)       gunzip $1       ;;
            *.tar)      tar xvf $1      ;;
            *.tbz2)     tar xvjf $1     ;;
            *.tgz)      tar xvzf $1     ;;
            *.zip)      unzip $1        ;;
            *.Z)        uncompress $1   ;;
            *.7z)       7z x $1         ;;
            *)          echo "don't know how to extract '$1'..." ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

__gitCommit () {
    git commit -m "$*"
}

### Environment variables
#export TERM=linux
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH-}:/usr/lib32"
export SHELL="/bin/bash"
export OLDPWD=$(pwd)
export OLDPWD2=${OLDPWD}

[ -f "/usr/bin/dotnet" ]    &&  export DOTNET_CLI_TELEMETRY_OPTOUT=1        # Disable .NET Core telemetry
[ -f "/usr/bin/dotnet" ]    &&  export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1  # Disable .NET Core first time message
[ -f "/usr/bin/nano" ]      &&  export EDITOR=nano                          # Make nano the default editor
[ -f "/usr/bin/optirun" ]   &&  export VGL_READBACK=pbo                     # Better optirun performance
[ -f "/usr/bin/wine" ]      &&  export WINEARCH=win32                       # Make WINE default to 32bit
[ -f "/usr/bin/steam" ]     &&  export STEAM_RUNTIME=0                      # Disable Steam Runtime

[ -d "/opt/dotnet/" ]       &&  export DOTNET_ROOT="/opt/dotnet/"           # .NET Root
[ -d "/usr/share/dotnet/" ] &&  export DOTNET_ROOT="/usr/share/dotnet/"     # .NET Root

[ ! -z "${DOTNET_ROOT}" ]   &&  export MSBuildSDKsPath=$(printf "%s\n" ${DOTNET_ROOT}/sdk/*  | tail -1)"/Sdks/" # MS Build and Mono coexistance


### Aliases
alias sh=$SHELL
alias sudo='sudo '
alias ls='ls --color=auto'
alias cd..='cd ..'
alias cd...='cd ../..'
alias cd....='cd ../../..'
alias cd.....='cd ../../../..'
alias cd......='cd ../../../../..'
alias cd="OLDPWD2=\${OLDPWD} && cd"
alias cd-="cd -"
alias cd--="__destDir=\${OLDPWD2} && cd \${__destDir}"
alias lsmnt='lsblk -l | tail -n +2 | awk '\''length($7) { print $1" => "$7 }'\'''
alias grep='grep -a --color --text'
alias uptime='uptime -p && printf "since " && uptime -s'

[ -f "/usr/bin/systemctl" ]     &&  alias systemctl='systemctl --no-pager -l -n15'
[ -f "/usr/bin/tmux" ]          &&  alias tmux-new='tmux new -s'
[ -f "/usr/bin/tmux" ]          &&  alias tmux-resume='tmux attach-session -t'
[ -f "/usr/bin/yaourt" ]        &&  alias yaourt='sudo printf "" && yaourt --noconfirm' # --needed'
[ -f "/usr/bin/wine" ]          &&  alias wine32='WINEARCH=win32 wine'
[ -f "/usr/bin/wine" ]          &&  alias wine64='WINEARCH=win64 wine'
[ -f "/usr/bin/xterm" ]         &&  alias xterm='xterm -rv'
[ -f "/usr/bin/xprop" ]         &&  alias xprop-wmclass='xprop | grep "WM_CLASS"'
[ -f "/usr/bin/wget" ]          &&  alias wget-persistent='wget -c --retry-connrefused --waitretry=1 --read-timeout=10 --timeout=5 -t 0'
[ -f "/proc/acpi/bbswitch" ]    &&  alias bbswitch-status="awk '{print $2}' /proc/acpi/bbswitch"

if [ -f "/usr/bin/git" ]; then
    alias git="git --no-pager"
    alias git-push="git fetch && git push"
    alias git-pull="git fetch && git pull --rebase"
    alias git-commit="git fetch && __gitCommit"
fi

if [ "${OSTYPE}" == "cygwin" ]; then
    alias killall="taskkill /IM"
fi

### Fixes
[ -f "/usr/bin/monodevelop" ]   &&  alias monodevelop="GNOME_DESKTOP_SESSION_ID="" monodevelop"
[ -f "/usr/bin/dotnet" ]        &&  alias dotnet='TERM=xterm dotnet'

### Per-application themes
#[ -f "/usr/bin/gedit" ]         &&  alias gedit="GTK_THEME=Adapta-Nokto-Eta:dark gedit"
[ -f "/usr/bin/libreoffice" ]   &&  alias libreoffice="GTK_THEME=\"$CURRENT_GTK_THEME:light\" libreoffice"

if [ -n "${SSH_CLIENT}" ] || [ -n "${SSH_TTY}" ]; then
    alias poweroff="echo Surely you don\'t mean to do that on the remote machine! && echo If you do, use \'command poweroff\' instead."
fi

### PATH

function try_set_dotnet_tools_dir {
    TARGET_PATH="$1"

    if [ -d "$TARGET_PATH" ]; then
        export PATH="$PATH:$TARGET_PATH"
    fi
}

function try_set_android_sdk_home {
    NEW_PATH="$*"

    if [ -d "$NEW_PATH" ]; then
        export ANDROID_HOME="$NEW_PATH"
        export ANDROID_SDK_PATH="$NEW_PATH"

        export PATH=${PATH}:${ANDROID_HOME}/tools
        export PATH=${PATH}:${ANDROID_HOME}/platform-tools
        export PATH=${PATH}:${ANDROID_HOME}/system-images
    fi
}

try_set_dotnet_tools_dir "$HOME/.dotnet/tools"
try_set_android_sdk_home "$HOME/.Android/Sdk"

