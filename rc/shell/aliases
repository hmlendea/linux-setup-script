#!/bin/sh
# If not running interactively, don't do anything
[[ $- != *i* ]] && return

ROOT_PATH=""
[ -d "/data/data/com.termux" ] && ROOT_PATH="/data/data/com.termux/files"

ROOT_ETC="${ROOT_PATH}/etc"
ROOT_PROC="${ROOT_PATH}/proc"
ROOT_USR="${ROOT_PATH}/usr"
ROOT_USR_BIN="${ROOT_USR}/bin"

# Functions

function set_alias_completion_source() {
    local BINARY_NAME="${1}"
    local ALIAS_NAME="${2}"
    local CAN_AUTOCOMPLETE=false

    for COMPLETION_SOURCE in "/usr/share/bash-completion/completions/${BINARY_NAME}.bash" \
                             "/usr/share/bash-completion/completions/${BINARY_NAME}"; do
        if [ -f "${COMPLETION_SOURCE}" ]; then
            CAN_AUTOCOMPLETE=true
            source "${COMPLETION_SOURCE}"
            break
        fi
    done

    ${CAN_AUTOCOMPLETE} && complete -F _${BINARY_NAME} ${ALIAS_NAME}
}

# Basic
[ ! -z "${SHELL}" ]     && alias sh="${SHELL}"

alias sudo='sudo ' # Enables the simultaneous use of sudo and other aliases
alias lsmnt='lsblk -l | tail -n +2 | awk '\''length($7) { print $1" => "$7 }'\'''
alias grep='grep -a --color --text'
alias pcregrep='pcregrep -a --color --text'
alias uptime='uptime -p && printf "since " && uptime -s'

# Directory navigation
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'
alias cd..='cd ..'
alias cd...='cd ../..'
alias cd....='cd ../../..'
alias cd.....='cd ../../../..'
alias cd......='cd ../../../../..'
alias cd="OLDPWD2=\${OLDPWD} && cd"
alias cd-="cd -"
alias cd--="__destDir=\${OLDPWD2} && cd \${__destDir}"

IS_SSH=false
if [ -n "${SSH_CLIENT}" ] || [ -n "${SSH_TTY}" ]; then
    IS_SSH=true
fi

if [ ! -f "/bin/busybox" ]; then
    COREUTILS_VERSION=$(ls --version | head -n 1 | awk '{print $4}' | awk -F. '{print $1}')
fi

${IS_SSH} && alias poweroff="echo Surely you don\'t mean to do that on the remote machine! && echo If you do, use \'command poweroff\' instead."

alias ls="ls -C --color=auto -h -Q --group-directories-first --format=horizontal"

[ ! -f "${ROOT_USR_BIN}/sl" ] && alias sl=ls

[ -f "${ROOT_USR_BIN}/bat" ]        && alias cat='bat -pp'
[ -f "${ROOT_USR_BIN}/batcat" ]     && alias cat='batcat -pp'
[ -f "${ROOT_USR_BIN}/batman" ]     && alias man='batman'
[ -f "${ROOT_USR_BIN}/open" ]       && alias open='xdg-open'
[ -f "${ROOT_USR_BIN}/shellcheck" ] && alias shellcheck='shellcheck -e SC2035,SC2164'
[ -f "${ROOT_USR_BIN}/systemctl" ]  && alias systemctl='systemctl --no-pager -l -n25'
[ -f "${ROOT_USR_BIN}/wget" ]       && alias wget-persistent='wget -c --retry-connrefused --waitretry=1 --read-timeout=10 --timeout=5 -t 0 --hsts-file="${XDG_DATA_HOME}/wget/hosts"'
[ -f "${ROOT_USR_BIN}/xterm" ]      && alias xterm='xterm -rv'
[ -f "${ROOT_USR_BIN}/xprop" ]      && alias xprop-wmclass='xprop | grep "WM_CLASS"'
[ -f "${ROOT_USR_BIN}/zoxide" ]     && alias cd='z'
[ -f "${ROOT_PROC}/acpi/bbswitch" ] && alias bbswitch-status="awk '{print $2}' /proc/acpi/bbswitch"

[ -f "${ROOT_USR_BIN}/alsi" ]        && [ ! -f "${ROOT_USR_BIN}/neofetch" ]     && alias neofetch='alsi'
[ -f "${ROOT_USR_BIN}/alsi" ]        && [ ! -f "${ROOT_USR_BIN}/fastfetch" ]    && alias fastfetch='alsi'
[ -f "${ROOT_USR_BIN}/fastfetch" ]   && [ ! -f "${ROOT_USR_BIN}/alsi" ]         && alias alsi='fastfetch'
[ -f "${ROOT_USR_BIN}/fastfetch" ]   && [ ! -f "${ROOT_USR_BIN}/neofetch" ]     && alias neofetch='fastfetch'
[ -f "${ROOT_USR_BIN}/neofetch" ]    && [ ! -f "${ROOT_USR_BIN}/alsi" ]         && alias alsi='neofetch'
[ -f "${ROOT_USR_BIN}/neofetch" ]    && [ ! -f "${ROOT_USR_BIN}/fastfetch" ]    && alias fastfetch='neofetch'

if [ -f "${ROOT_USR_BIN}/git" ]; then
    alias git="git --no-pager"
    alias git-push="git fetch && git push"
    alias git-pull="git fetch && git pull --rebase"
    alias git-commit="git fetch && __gitCommit"
fi

if [ -f "${ROOT_USR_BIN}/nvidia-settings" ]; then
    alias nvidia-settings="nvidia-settings --config=\"${XDG_CONFIG_HOME}/nvidia/settings\""
fi

if [ -f "${ROOT_USR_BIN}/unp" ]; then
    alias extract='unp'
    alias uncompress='extract'
    alias unpack='extract'

    set_alias_completion_source "unp" "extract"
    set_alias_completion_source "unp" "uncompess"
    set_alias_completion_source "unp" "unpack"
fi

if [ -f "${ROOT_USR_BIN}/tmux" ]; then
    alias tmux-new='tmux new -s'
    alias tmux-resume='tmux attach-session -t'
    alias tmux-list='tmux list-session'
fi

if [ ! -f "${ROOT_USR_BIN}/hostname" ]; then
    if [ -n "${HOSTNAME}" ]; then
        alias hostname='echo ${HOSTNAME}'
    elif [ -f "${ROOT_ETC}/hostname" ]; then
        alias hostname="cat ${ROOT_ETC}/hostname"
    elif [ -f "${ROOT_USR_BIN}/hostnamectl" ]; then
        alias hostname='hostnamectl hostname'
    fi
fi

if [ "${OSTYPE}" = "cygwin" ]; then
    alias killall="taskkill /IM"
fi

### Package manager
PACKAGE_MANAGER_CMD='sudo printf "" && ${PACKAGE_MANAGER}'
CAN_PM_ALIAS_AUTOCOMPLETE=false

if [[ "${PACKAGE_MANAGER}" == "apt" ]]; then
    PACKAGE_MANAGER_CMD="sudo apt -y"
elif [[ "${PACKAGE_MANAGER}" == "paru" ]] \
  || [[ "${PACKAGE_MANAGER}" == "yay" ]]; then
    PACKAGE_MANAGER_CMD="${PACKAGE_MANAGER_CMD} --noredownload --norebuild --sudoloop" # Optimisations
    PACKAGE_MANAGER_CMD="${PACKAGE_MANAGER_CMD} --noconfirm" # Prompt skip
    PACKAGE_MANAGER_CMD="${PACKAGE_MANAGER_CMD} --bottomup --color auto" # Visuals
elif [[ "${PACKAGE_MANAGER}" == "yaourt" ]]; then
    PACKAGE_MANAGER_CMD="${PACKAGE_MANAGER_CMD} --noconfirm"
fi

alias yeet="${PACKAGE_MANAGER_CMD}"
set_alias_completion_source "${PACKAGE_MANAGER}" "yeet"

### Fixes
[ -f "${ROOT_USR_BIN}/monodevelop" ]   &&  alias monodevelop="GNOME_DESKTOP_SESSION_ID="" monodevelop"
[ -f "${ROOT_USR_BIN}/dotnet" ]        &&  alias dotnet='TERM=xterm dotnet'
