#!/bin/sh
# If not running interactively, don't do anything
[[ $- != *i* ]] && return

ROOT_PATH=""
[ -d "/data/data/com.termux" ] && ROOT_PATH="/data/data/com.termux/files/usr"

ROOT_BIN="${ROOT_PATH}/bin"
ROOT_OPT="${ROOT_PATH}/opt"
ROOT_USR="${ROOT_PATH}/usr"
ROOT_USR_BIN="${ROOT_USR}/bin"
ROOT_USR_SHARE="${ROOT_USR}/share"

### Environment variables
#export TERM=linux
export LANG=en_GB.UTF-8

# Paths
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH-}:/usr/lib32"

export NUGET_PACKAGES="${XDG_CACHE_HOME}/nuget/packages"
export SSL_CERT_DIR="/etc/ssl/certs"

export __GL_SHADER_DISK_CACHE_PATH="${XDG_CACHE_HOME}/nvidia/GLCache"
export CARGOHOME="${XDG_DATA_HOME}/cargo"
export CUDA_CACHE_PATH="${XDG_CACHE_HOME}/nvidia"
export GNUPGHOME="${XDG_DATA_HOME}/gnupg"
export GRADLE_USER_HOME="${XDG_DATA_HOME}/gradle"
export GTK2_RC_FILES="${XDG_CONFIG_HOME}/gtk-2.0/gtkrc"
export INPUTRC="${XDG_CONFIG_HOME}/readline/inputrc"
export NPM_CONFIG_USERCONFIG="${XDG_CONFIG_HOME}/npm/npmrc"
export XAUTHORITY="${XDG_RUNTIME_DIR}/Xauthority"

export HISTFILE="${XDG_DATA_HOME}/bash/history"
export LESSHISTFILE="${XDG_CACHE_HOME}/less/history"

# Gaming
if [ -f "/usr/bin/steam" ]; then
    export SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS=0 # Fix for loosing focus in Steam BPM after exiting a game
    export VKD3D_CONFIG=upload_hvv # Resizeable BAR
    export WINE_FULLSCREEN_FSR=1
fi

# Shell
export SHELL="${ROOT_BIN}/bash"
export HISTSIZE=10000           # Set the Bash history size to 10K entries
export HISTCONTROL=ignoredups   # Ignore repeated entries in the Bash history

if [ -n "${SSH_CLIENT}" ] || [ -n "${SSH_TTY}" ]; then
    export GPG_TTY="${SSH_TTY}"
fi

# Shell colours
export LESS_TERMCAP_mb=$'\e[1;32m'
export LESS_TERMCAP_md=$'\e[1;36m' # Cyan
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;97m' # White
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[1;4;033m'

[ -f "${ROOT_USR_BIN}/bat" ] && export BAT_THEME="Visual Studio Dark+"

# User
if [ -z "${USER}" ]; then
    if [ -n "${USERNAME}" ]; then
        export USER="${USERNAME}"
    else
        export USER="$(whoami)"
        export USERNAME="${USER}"
    fi
fi

# Set the default CLI text editor
if [ -z "${EDITOR}" ] \
|| [ ! -f "${ROOT_USR_BIN}/${EDITOR}" ]; then
	[ -f "${ROOT_USR_BIN}/vi" ] && export EDITOR=vi
	[ -f "${ROOT_USR_BIN}/vim" ] && export EDITOR=vim
	[ -f "${ROOT_USR_BIN}/nano" ] && export EDITOR=nano
	[ -f "${ROOT_USR_BIN}/micro" ] && export EDITOR=micro
fi

[ -f "${ROOT_USR_BIN}/micro" ] && [[ ${COLORTERM} =~ ^(truecolor|24-bit|24bit)$ ]] && export MICRO_TRUECOLOR=1
[ -f "${ROOT_USR_BIN}/optirun" ] && export VGL_READBACK=pbo  # Better optirun performance

if [ -f "${ROOT_USR_BIN}/dotnet" ]; then
    export DOTNET_CLI_TELEMETRY_OPTOUT=1        # Disable .NET Core telemetry
    export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1  # Disable .NET Core first time message
fi

if [ -f "${ROOT_USR_BIN}/paru" ]; then
    export PACKAGE_MANAGER="paru"
elif [ -f "${ROOT_USR_BIN}/yay" ]; then
    export PACKAGE_MANAGER="yay"
elif [ -f "${ROOT_USR_BIN}/yaourt" ]; then
    export PACKAGE_MANAGER="yaourt"
else
    export PACKAGE_MANAGER="pacman"
fi

# Others
export OLDPWD=$(pwd)
export OLDPWD2=${OLDPWD}
